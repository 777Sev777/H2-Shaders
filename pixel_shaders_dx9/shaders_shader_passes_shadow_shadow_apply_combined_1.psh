// Your usual sampler declarations
DX11_sampler2D(s0);  // The shadow map
DX11_sampler2D(s1);  // Additional sampler (not sure what you're using this for)

// Constants
float4 c2 : register(C2);  // Your existing constants
float someFactor = 0.1;  // Tune this for dynamic bias
float maxDepthRange = 0.2;  // For depth range clamping

float4 main(
    // ... your existing input parameters
    float4 pos_unused : SV_POSITION,
    float4 color0 : COLOR0,
    float4 tc[3] : TEXCOORD0,
    float4 tc3 : TEXCOORD3,
    // ... more existing parameters
) : COLOR
{
    float4 r0;
    r0 = 0;

    // Initialize variables for dynamic bias and statistical methods
    float minDepthInFilterRegion = 1.0;
    float maxDepthInFilterRegion = 0.0;
    float sumDepth = 0.0;
    int sampleCount = 0;

    // Loop for PCF sampling
    for (int i = 0; i < 3; i++)  // Adjust the loop for your PCF kernel size
    {
        float depth = DX11_tex2Dproj(s0, tc[i]).r;
        
        // Update min and max depth for dynamic bias
        minDepthInFilterRegion = min(minDepthInFilterRegion, depth);
        maxDepthInFilterRegion = max(maxDepthInFilterRegion, depth);

        // Update sum for statistical methods
        sumDepth += depth;
        sampleCount++;

        // Your existing shadow comparison logic
        if (tc[i].b/tc[i].a < depth)
            r0 += 1.0f;
    }

    // Calculate dynamic bias
    float dynamicBias = maxDepthInFilterRegion - minDepthInFilterRegion;
    dynamicBias *= someFactor;

    // Calculate statistical bias (mean for now)
    float meanDepth = sumDepth / float(sampleCount);

    // Apply dynamic bias and statistical bias
    // ... your logic here

    // Apply depth range clamping
    float clampedDepth = clamp(meanDepth, minDepthInFilterRegion, minDepthInFilterRegion + maxDepthRange);

    // Final shadow calculation
    r0 /= 3;  // Adjust based on your PCF kernel size
    r0 = c2.a * r0 + (1 - c2.a);

    // Your existing code for fog, color, etc.
    float4 tex3 = DX11_tex2Dproj(s1, tc3);
    r0 *= tex3.bbbb;

    if (color0.a <= 0.5) {
        r0 = 0;
    }

    return r0;
}
